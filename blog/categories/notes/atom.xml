<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes | 赫謙小便籤]]></title>
  <link href="http://hechien.github.com/octopress/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://hechien.github.com/octopress/"/>
  <updated>2012-07-13T10:20:00+08:00</updated>
  <id>http://hechien.github.com/octopress/</id>
  <author>
    <name><![CDATA[赫謙]]></name>
    <email><![CDATA[hechien@me.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[N+1 Queries]]></title>
    <link href="http://hechien.github.com/octopress/blog/n-plus-1-queries/"/>
    <updated>2012-07-13T10:16:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/n-plus-1-queries</id>
    <content type="html"><![CDATA[<h1>什麼是 N+1 Query</h1>

<p>在Rails中有個ActiveRecord，它可以很容易產生資料庫關連、操作的東西。</p>

<p>但是關連這種東西一用不好就有可能造成災難，看看範例。</p>

<h1>範例？</h1>

<p>我有一個<code>CrashLog</code> model belongs_to <code>Product</code>，然後在<code>CrashLog</code>內用Delegate對應到<code>Product</code>的<code>name</code></p>

<pre><code>    # crash_log.rb
    delegate :name, to: :product, prefix: true
</code></pre>

<p>如此一來可以用<code>c = CrashLog.first; c.product_name</code>來直接存取到<code>product.name</code></p>

<p>可是當你用迴圈的時候就有可能遇到 N+1 Query。</p>

<p>譬如說我在首頁上面寫的是 <code>@crash_logs = CrashLog.all</code></p>

<p>結果SQL跑出上百筆類似以下的東西：</p>

<p>Liquid error: getaddrinfo: nodename nor servname provided, or not known</p>

<p>但是如果當我改成 <code>@crash_logs = CrashLog.includes :product</code> 就會變成另外一種結果</p>

<p>Liquid error: getaddrinfo: nodename nor servname provided, or not known</p>

<p>怎麼樣？很恐怖吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用FactoryGirl建立假資料]]></title>
    <link href="http://hechien.github.com/octopress/blog/factory-girl-with-db-seeds-for-fake-data/"/>
    <updated>2012-07-13T10:14:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/factory-girl-with-db-seeds-for-fake-data</id>
    <content type="html"><![CDATA[<h2>安裝FactoryGirl</h2>

<p>先在 <code>Gemfile</code> 內寫：</p>

<pre><code>    gem 'rspec-rails'
    gem 'factory_girl_rails'
</code></pre>

<p>執行 <code>bundle install</code></p>

<p>上面這種方式會順便把<code>RSpec</code>給裝起來，反正沒壞處</p>

<p>接著打開 <code>config/application.rb</code></p>

<p>加入</p>

<pre><code>    config.generators do |g|
      g.test_framework :rspec, :fixture =&gt; true, :views =&gt; false, :fixture_replacement =&gt; :factory_girl
      g.fixture_replacement :factory_girl, :dir =&gt; "spec/factories"
    end
</code></pre>

<p>這樣做的話會在建立Model的時候一併建立相關檔案。</p>

<h2>第一步</h2>

<p>假設我們建立 <code>Post</code> model</p>

<p><code>rails g model Post title:string content:string author:string state:string; rake db:migrate</code></p>

<p>現在可以開始建立測試資料了，打開 <code>spec/factories/posts.rb</code></p>

<p>我們先新增一個正常的資料結構</p>

<pre><code>    FactoryGirl.define do
      factory :post do
        title "MyString"
        content "MyString"
        author "HeChien"
        state "public"
      end
    end
</code></pre>

<p>這樣子，我們就可以在<code>rails console</code>內透過<code>FactoryGirl.create :post</code>來建立一筆Post資料了</p>

<h3>怎麼了？你忘了？說好的，亂數呢？</h3>

<p>誰跟你說好了=_= ... 不過要亂數的話 ...</p>

<p>假設我們要讓<code>title</code>變亂數，那就把<code>title</code>改為</p>

<pre><code>    title "MyString" # 原本是這樣
    sequence(:title) { |n| "Title -- #{n}" } # 改成這樣
</code></pre>

<p>如此一來就會產生<code>"Title -- 1"</code>、<code>"Title -- 2"</code>之類的資料了</p>

<p>但是有的時候我們想要產生客製化的資料，譬如像是又亂數標題又是<code>state</code>為<code>closed</code>的文章的話要怎辦？</p>

<p>那就看下一節啊</p>

<h2>第二步 - 不同狀態不同內容</h2>

<p>同樣都是定義在<code>Post</code>中，我們可能需要不一樣的狀態、內容，所以我們可以這樣做</p>

<pre><code>    # 1. title為亂數，content為亂數，發佈為published，author為亂數，叫做 :random_life
    # 2. title為"Hello, world"，content為"XD"，發佈為closed，author為預設，叫做 :posted_by_hechien
    # 改成以下這樣

    FactoryGirl.define do
      factory :post do
        title "MyString"
        content "MyString"
        author "HeChien"
        state "public"

        factory :random_life do
          sequence(:title) { |n| "Title -- #{n}" }
          sequence(:content) { |n| "Randome #{n} Content" }
          state "published"
          sequence(:author) { |n| "Author: #{n}" }
        end

        factory :posted_by_hechien do
          title "Hello, world"
          content "XD"
          state "closed"
        end
      end
    end
</code></pre>

<p>如此一來，我們就可以用</p>

<p><code>FactoryGirl.create :random_life</code> 來產生幾乎都亂數的資料，以及用 <code>FactoryGirl.create :posted_by_hechien</code> 來產生與我本人有關的資料XD</p>

<h2>第三步 - Relationship :"></h2>

<p>臉紅個屁！</p>

<p>總是會需要建立關連的，譬如說<code>Post</code>與<code>Comment</code>。</p>

<pre><code>    FactoryGirl.define do
      factory :comment do
        post do
          FactoryGirl.create :post
        end
        author "MyString"
        content "MyString"
      end
    end
</code></pre>

<p>好了，你已經知道怎麼做了 (誤</p>

<h2>與 <code>db/seeds.rb</code> 邂逅</h2>

<pre><code>    100.times { FactoryGirl.create :random_life }
    10.times  { FactoryGirl.create :posted_by_hechien }
    20.times  { FactoryGirl.create :post }
</code></pre>

<p><code>rake db:seed</code> 打完收工</p>

<p>但事實上，假資料要用這個建立 => <a href="https://github.com/ryanb/populator">https://github.com/ryanb/populator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3與Ajax的邂逅]]></title>
    <link href="http://hechien.github.com/octopress/blog/rails3-meets-ajax/"/>
    <updated>2012-07-03T16:01:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/rails3-meets-ajax</id>
    <content type="html"><![CDATA[<p>昨天晚上花了一點點時間寫了<a href="http://murmur-coder.herokuapp.com">Murmur Coder</a>，後來加上了Ajax的功能讓發出表單內容後可以不需要重新整理頁面就能夠根據response去顯示畫面。</p>

<p>其實Ajax這種話題應該是已經被講到爛了才對，不過我還是做一下註記好了，畢竟這種方式很Cool ... Rails 把這些東西包在<code>rails.js</code>內了，所以我們可以很簡單的就去實作Ajax的功能。</p>

<p>最近這幾年比較流行的JavaScript寫法似乎是Obtrusive JavaScript，所以我在這邊會簡單的聊一下。</p>

<p>在以往常見的JavaScript寫法，是把一些Event會發生的事件直接寫在HTML Tag上，例如：</p>

<p><code>&lt;p onclick="alert('Hello, world');"&gt;Click me&lt;/p&gt;</code></p>

<p>直接把<code>onclick</code>寫在<code>p</code>標籤內，這種inline的寫法就有點像是直接把CSS寫在<code>style</code>屬性內一樣噁心。之後好像Prototype、jQuery之類的JavaScript framework出來了，因為能夠透過CSS Selector的方式去抓DOM，所以就能夠變成是：</p>

<pre><code>    &lt;p&gt;Click me&lt;/p&gt;
    &lt;script&gt;$('p').click(function(){alert("Hello, world");})&lt;/script&gt;
</code></pre>

<p>這種把HTML與JavaScript分離的作法就叫做Obtrusive JavaScript，讓JavaScript隱藏在某個角落內，使HTML、JavaScript能夠各司其職。</p>

<p>回到我們的主題，就因為Obtrusive JavaScript的概念，所以Rails在整合Ajax的時候十分容易。</p>

<p>我們來看看如何修改<code>form_for</code>吧 ... 假設原本是 <code>form_for @murmur do |form|</code> 的話，就變成是： <code>form_for(@murmur, remote: true) do |form|</code> ... 剩下的Rails已經幫你搞定了</p>

<p>不過開始測試時會發現：「那我要怎樣處理Callback？」、「錯誤咧？怎麼辦啊？」</p>

<p>嘖嘖，這個時候就是交給<code>rails.js</code>來處理囉 ... <code>rails.js</code> 中提供了四個Callback function：</p>

<ul>
<li><code>ajax:beforeSend</code>: 用於在送出之前的狀態</li>
<li><code>ajax:success</code>: 用在執行成功的狀態，基本上Response status code為200, 201等都會進來這邊</li>
<li><code>ajax:complete</code>：不論結果，只要Request執行結束就會跑來這邊，適合重設表單等工作</li>
<li><code>ajax:error</code>：當遇到錯誤的時候會顯示這邊，像是Status code為4xx, 5xx時就會跑來這邊了</li>
</ul>


<p>因為我是直接寫CoffeeScript的，所以我就直接貼CoffeeScript code</p>

<p><div><script src='https://gist.github.com/3018510.js?file=murmurs.js.coffee'></script>
<noscript><pre><code>$ -&gt;
  submit_button = $('form#new_murmur input[name=&quot;commit&quot;]')
  submit_button_origin_value = submit_button.val()

  $('form#new_murmur')
  .bind 'ajax:beforeSend', (e, xhr, settings) -&gt;
    submit_button.val(&quot;正在送啦&quot;)

  .bind 'ajax:success', (e, data, status, xhr) -&gt;
    $(this).get(0).reset()
    $(&quot;#murmurs-list&quot;).html(xhr.responseText)

  .bind 'ajax:complete', (e, xhr, status) -&gt;
    submit_button.val(submit_button_origin_value)

  .bind 'ajax:error', (e, xhr, status, error) -&gt;
    form = $(this)
    [errors, errorText] = [null, null]
    try
      errors = $.parseJSON xhr.responseText
    catch err
      errors = {message: &quot;可能 ... 主機被我的貓拿來當玩具玩了吧？&quot;}

    errorText = &quot;呃，是有一些錯誤啦 ... \n&lt;ul&gt;&quot;

    for error in errors
      errorText += &quot;&lt;li&gt;#{error}: #{errors[error]}&lt;/li&gt;&quot;

    errorText += &quot;&lt;/ul&gt;&quot;

    form.find('div.error_explanation').html(errorText)</code></pre></noscript></div>
</p>

<p>簡單的說，就是<code>bind</code>住那四個callbacks就好。只不過在Controller中要記住的就是，如果response content type不是HTML的話，可能會進不了success，這點要注意一下 ....</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Devise與Omniauth實作Facebook自定callback回傳]]></title>
    <link href="http://hechien.github.com/octopress/blog/facebook-oauth-custom-callback-with-devise-and-omniauth/"/>
    <updated>2012-06-19T14:21:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/facebook-oauth-custom-callback-with-devise-and-omniauth</id>
    <content type="html"><![CDATA[<p>在測試OAuth登入的時候，新浪與Twitter都會原封不動的把原本傳過去的網址(包含Querystring)一起傳回到Callback網址上，可是Facebook不管怎樣就是辦不到，害我沒辦法讓Mobile Safari收到Callback後Redirect到指定的App去。</p>

<p>原本以為是Omniauth中我有參數沒設到，或者是Facebook設定不對，但是一直trace code卻什麼都沒發現，只好退而求其次，用別的方式去硬幹這部份。</p>

<p>我的作法是，先到 <code>config/routes.rb</code> 去硬刻一個route給Facebook這種不會把Querystring跟著弄回來的Providers用，所以如下</p>

<p><div><script src='https://gist.github.com/2952624.js?file=routes.rb'></script>
<noscript><pre><code>devise_controllers = {
  omniauth_callbacks: &quot;users/omniauth_callbacks&quot;
}
devise_scope :user do
  get 'logout' =&gt; 'devise/sessions#destroy'
  get '/users/auth/:provider/callback/:url_identify' =&gt; 'users/omniauth_callbacks#passthru'
end
devise_for :users, {controllers: devise_controllers}</code></pre></noscript></div>
</p>

<p>然後在App端這邊發送Request的時候就必須從 <code>http://host/users/auth/facebook?url_identify=xxx</code> 改成 <code>http://host/users/auth/facebook/callback/xxx</code> 了。</p>

<p>然後在 <code>omniauth_callbacks_controller.rb</code> 中手動加入 <code>passthru</code> 這個 action</p>

<p><div><script src='https://gist.github.com/2952624.js?file=omniauth_callbacks_controller.rb'></script>
<noscript><pre><code>def passthru
  session[:url_identify] = nil
  session[:url_identify] = params[:url_identify].to_s
  redirect_to &quot;/users/auth/#{params[:provider]}&quot;
end</code></pre></noscript></div>
</p>

<p>這樣子在指定的provider action中就能正常吃到url_identify了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[實作Drag and Drop上傳方式，傳到Rails + Paperclip]]></title>
    <link href="http://hechien.github.com/octopress/blog/how-to-implement-drag-and-drop-upload-with-rails-and-paperclip/"/>
    <updated>2012-06-18T10:28:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/how-to-implement-drag-and-drop-upload-with-rails-and-paperclip</id>
    <content type="html"><![CDATA[<p>終於搞出來了 ... 我的媽呀，基礎知識全部忘掉就是了 ... 丟臉</p>

<p>Okay ... 記錄一下實作，不過怎樣用Rails建立Paperclip上傳機制這部份我就不多說了</p>

<p>主要是這段JavaScript code</p>

<p><div><script src='https://gist.github.com/2937600.js?file=uploader.js'></script>
<noscript><pre><code>      $(document).bind('drop', function(e){
        e.preventDefault();
        e.stopPropagation();
        upload(e.originalEvent.dataTransfer.files);
      }).bind('dragenter dragover', function(e){
        e.preventDefault();
        e.stopPropagation();
      });

      var upload = function(files){
        if(typeof(FormData) != 'undefined'){
          var form = new FormData();
          form.append('path', '/');
          for(i = 0; i &lt; files.length; i++){
            form.append('assets[][asset]', files[i]);
          }

          $.ajax({
            url: '/assets/upload_by_drag_and_drop',
            data: form,
            type: 'POST',
            contentType: false,
            processData: false,
            success: function(data){
              console.log(data);
            }
          });
        }
      }</code></pre></noscript></div>
</p>

<p>還有這段Rails code</p>

<p><div><script src='https://gist.github.com/2937600.js?file=upload_by_drag_and_drop.rb'></script>
<noscript><pre><code>assets = params[:assets]
assets.each do |asset|
  Asset.create(asset)
end</code></pre></noscript></div>
</p>

<p>是的，就只有這樣，哈</p>

<p>正在想著把這個部分再用jQuery封裝得好看一點 ...</p>

<p>其實很簡單，就是JavaScript吃到drop event的時候，把收集到的檔案資訊整理起來，用FormData封裝，然後送到後台去這樣。</p>

<p>因為用到XMLHttpRequest，所以乾脆用jQuery來跑好了</p>

<p>註：drop事件、FormData似乎都是HTML 5後才有support的功能，而且不是每個Browser都有Support，所以記得還是得實作傳統的上傳機制 ...</p>

<p>UPDATED: 2012/06/16 02:25 --</p>

<p>已經更改成用jQuery的ajax來上傳了，這樣就省得再用XMLHttpRequest了</p>
]]></content>
  </entry>
  
</feed>
