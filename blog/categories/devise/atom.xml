<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devise | 赫謙小便籤]]></title>
  <link href="http://hechien.github.com/octopress/blog/categories/devise/atom.xml" rel="self"/>
  <link href="http://hechien.github.com/octopress/"/>
  <updated>2012-07-04T10:08:38+08:00</updated>
  <id>http://hechien.github.com/octopress/</id>
  <author>
    <name><![CDATA[赫謙]]></name>
    <email><![CDATA[hechien@me.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Devise與Omniauth實作Facebook自定callback回傳]]></title>
    <link href="http://hechien.github.com/octopress/blog/facebook-oauth-custom-callback-with-devise-and-omniauth/"/>
    <updated>2012-06-19T14:21:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/facebook-oauth-custom-callback-with-devise-and-omniauth</id>
    <content type="html"><![CDATA[<p>在測試OAuth登入的時候，新浪與Twitter都會原封不動的把原本傳過去的網址(包含Querystring)一起傳回到Callback網址上，可是Facebook不管怎樣就是辦不到，害我沒辦法讓Mobile Safari收到Callback後Redirect到指定的App去。</p>

<p>原本以為是Omniauth中我有參數沒設到，或者是Facebook設定不對，但是一直trace code卻什麼都沒發現，只好退而求其次，用別的方式去硬幹這部份。</p>

<p>我的作法是，先到 <code>config/routes.rb</code> 去硬刻一個route給Facebook這種不會把Querystring跟著弄回來的Providers用，所以如下</p>

<p><div><script src='https://gist.github.com/2952624.js?file=routes.rb'></script>
<noscript><pre><code>devise_controllers = {
  omniauth_callbacks: &quot;users/omniauth_callbacks&quot;
}
devise_scope :user do
  get 'logout' =&gt; 'devise/sessions#destroy'
  get '/users/auth/:provider/callback/:url_identify' =&gt; 'users/omniauth_callbacks#passthru'
end
devise_for :users, {controllers: devise_controllers}</code></pre></noscript></div>
</p>

<p>然後在App端這邊發送Request的時候就必須從 <code>http://host/users/auth/facebook?url_identify=xxx</code> 改成 <code>http://host/users/auth/facebook/callback/xxx</code> 了。</p>

<p>然後在 <code>omniauth_callbacks_controller.rb</code> 中手動加入 <code>passthru</code> 這個 action</p>

<p><div><script src='https://gist.github.com/2952624.js?file=omniauth_callbacks_controller.rb'></script>
<noscript><pre><code>def passthru
  session[:url_identify] = nil
  session[:url_identify] = params[:url_identify].to_s
  redirect_to &quot;/users/auth/#{params[:provider]}&quot;
end</code></pre></noscript></div>
</p>

<p>這樣子在指定的provider action中就能正常吃到url_identify了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Subdomain時自定Devise的Mailer Template]]></title>
    <link href="http://hechien.github.com/octopress/blog/custom-devise-mailer-template-with-subdomain/"/>
    <updated>2012-06-05T17:03:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/custom-devise-mailer-template-with-subdomain</id>
    <content type="html"><![CDATA[<p>這問題其實也是忽然間被雷到 ... 在這樣做之前要先去修改 <code>config/initializers/devise.rb</code>，設定自定的Mailer，然後我們還要自己手動產生一個Mailer。</p>

<!-- more -->


<p>我原本的作法是用Namespace來寫整個站，所以View的分類就是已經有分好資料夾了，我直接貼code可以嗎XD</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="sx">%w&#39;confirmation_instructions reset_password_instructions unlock_instructions&#39;</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">method</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;define_method &quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="sr">&quot; do |record|</span>
</span><span class='line'><span class="sr">  send_mail_with_record_and_action(record, method.to_s)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def send_mail_with_record_and_action(record, action)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">initialize_from_record</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span> <span class="n">headers_for</span><span class="p">(</span><span class="n">action</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'><span class="n">headers</span><span class="o">[</span><span class="ss">:template_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">record</span><span class="o">.</span><span class="n">from_app</span><span class="si">}</span><span class="s2">/mailer&quot;</span>
</span><span class='line'><span class="n">mail</span> <span class="n">headers</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>由於devise有<code>confirmation_instructions</code>、<code>reset_password_instructions</code>、<code>unlock_instructions</code>三個，而我只是要導到不同的app目錄去，所以就這樣子refactor，讓headers中的<code>template_path</code>可以是自訂的目錄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OmniAuth + Devise + OpenID]]></title>
    <link href="http://hechien.github.com/octopress/blog/omniauth-plus-devise-plus-openid/"/>
    <updated>2012-05-08T11:46:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/omniauth-plus-devise-plus-openid</id>
    <content type="html"><![CDATA[<p>最近內部討論結果覺得有可能需要Support Open ID的登入機制，因此就去survey了一下Devise擴展Open ID的方式。因為Devise本身支援OmniAuth，所以就直接以<code>Devise OmniAuth OpenID</code>的方式搜尋了一下，便找到這篇：<a href="http://blog.xdite.net/posts/2011/12/05/omniauth-clean-auth-provider-4/">http://blog.xdite.net/posts/2011/12/05/omniauth-clean-auth-provider-4/</a></p>

<p>其實這篇照做就可以了，只不過因為原始碼是從<a href="http://ruby-taiwan.org">http://ruby-taiwan.org</a>那邊來的，所以有一些code是不能用的 ... 需要自己稍微做調整一下</p>

<p>這個實作版本是Rails 3.2.3、Devise 2.0.4、OmniAuth 1.0.3</p>

<p>裡面的Code在<code>omniauth_callbacks.rb</code>中第9行左右有個問題，User必須要用includes把authorizations給引入進來，不然會噴 ... XD</p>

<p>可能是因為原本的Code用MongoID當做Data source的關係，所以原本的Code內並沒有寫includes這一塊吧 ...</p>

<p>然後要記得在<code>user.rb</code>實作<code>bind_service</code>，不然原本的code去bind使用者的部份會有問題 ...</p>

<p>要把<code>omniauth_callbacks.rb</code>放在<code>app/models/user</code>底下、把<code>omniauth_callbacks_controller.rb</code>放在<code>app/controllers/users</code>底下，總之在model的資料夾是<code>user</code>而controller的資料夾是<code>users</code>就對了。</p>

<p>大致上就這樣。</p>

<p>喔對，很重要的一點就是 ... 現在網路上很多範例都會叫你去<code>config/initializers/omniauth.rb</code>內設定provider，這樣做的話一定會噴掉 ... 我在這邊花很多時間才搞定囧，請記住，<strong>不必</strong>寫在這個地方！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devise註冊後自訂轉向頁面]]></title>
    <link href="http://hechien.github.com/octopress/blog/devisezhu-ce-hou-zi-ding-zhuan-xiang-ye-mian/"/>
    <updated>2012-02-20T16:54:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/devisezhu-ce-hou-zi-ding-zhuan-xiang-ye-mian</id>
    <content type="html"><![CDATA[<p>因為公司的網站在註冊會員之後需要根據不同的App來顯示不同的layout或畫面，因此註冊後要自訂一個轉向頁面，所以我們必須要自己override原本的RegistrationsController ...</p>

<!-- more -->


<p>上網找了資料之後看到說只需要自訂<code>after_sign_up_path_for</code>就可以了，所以開始嘗試卻發現不管怎麼做都會失敗，把<code>after_sign_up_path_for</code>改成<code>after_sign_in_path_for</code>也沒用，logger也都沒有任何記錄</p>

<p>後來讀到<a href="https://github.com/plataformatec/devise/wiki/How-To:-Redirect-to-a-specific-page-on-successful-sign-up-(registration)">https://github.com/plataformatec/devise/wiki/How-To:-Redirect-to-a-specific-page-on-successful-sign-up-(registration)</a>後注意到另外一個名稱：<code>after_inactive_sign_up_path_for</code>，更改了之後發現it works!</p>

<p>仔細想想才曉得，原來是因為我有增加confirmation的功能，讓使用者必須要按下Confirm連結才會activated，因此，<code>after_sign_up_path_for</code>是給沒打開Confirm功能用的，而<code>after_inactive_sign_up_path_for</code>則是給啟用Confirm功能用的。</p>

<p>附加內容：Camelcase => 底線的作法： <code>"PocketSnapper".underscore #=&gt; "pocket_snapper"</code></p>
]]></content>
  </entry>
  
</feed>
