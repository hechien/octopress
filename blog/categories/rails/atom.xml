<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 赫謙小便籤]]></title>
  <link href="http://hechien.github.com/octopress/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://hechien.github.com/octopress/"/>
  <updated>2012-06-30T09:42:00+08:00</updated>
  <id>http://hechien.github.com/octopress/</id>
  <author>
    <name><![CDATA[赫謙]]></name>
    <email><![CDATA[hechien@me.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[實作Drag and Drop上傳方式，傳到Rails + Paperclip]]></title>
    <link href="http://hechien.github.com/octopress/blog/how-to-implement-drag-and-drop-upload-with-rails-and-paperclip/"/>
    <updated>2012-06-18T10:28:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/how-to-implement-drag-and-drop-upload-with-rails-and-paperclip</id>
    <content type="html"><![CDATA[<p>終於搞出來了 ... 我的媽呀，基礎知識全部忘掉就是了 ... 丟臉</p>

<p>Okay ... 記錄一下實作，不過怎樣用Rails建立Paperclip上傳機制這部份我就不多說了</p>

<p>主要是這段JavaScript code</p>

<p><div><script src='https://gist.github.com/2937600.js?file=uploader.js'></script>
<noscript><pre><code>      $(document).bind('drop', function(e){
        e.preventDefault();
        e.stopPropagation();
        upload(e.originalEvent.dataTransfer.files);
      }).bind('dragenter dragover', function(e){
        e.preventDefault();
        e.stopPropagation();
      });

      var upload = function(files){
        if(typeof(FormData) != 'undefined'){
          var form = new FormData();
          form.append('path', '/');
          for(i = 0; i &lt; files.length; i++){
            form.append('assets[][asset]', files[i]);
          }

          $.ajax({
            url: '/assets/upload_by_drag_and_drop',
            data: form,
            type: 'POST',
            contentType: false,
            processData: false,
            success: function(data){
              console.log(data);
            }
          });
        }
      }</code></pre></noscript></div>
</p>

<p>還有這段Rails code</p>

<p><div><script src='https://gist.github.com/2937600.js?file=upload_by_drag_and_drop.rb'></script>
<noscript><pre><code>assets = params[:assets]
assets.each do |asset|
  Asset.create(asset)
end</code></pre></noscript></div>
</p>

<p>是的，就只有這樣，哈</p>

<p>正在想著把這個部分再用jQuery封裝得好看一點 ...</p>

<p>其實很簡單，就是JavaScript吃到drop event的時候，把收集到的檔案資訊整理起來，用FormData封裝，然後送到後台去這樣。</p>

<p>因為用到XMLHttpRequest，所以乾脆用jQuery來跑好了</p>

<p>註：drop事件、FormData似乎都是HTML 5後才有support的功能，而且不是每個Browser都有Support，所以記得還是得實作傳統的上傳機制 ...</p>

<p>UPDATED: 2012/06/16 02:25 --</p>

<p>已經更改成用jQuery的ajax來上傳了，這樣就省得再用XMLHttpRequest了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Rails中如何重新設定counter_cache的值？]]></title>
    <link href="http://hechien.github.com/octopress/blog/how-to-reset-counter-cache-in-rails-3/"/>
    <updated>2012-06-18T10:25:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/how-to-reset-counter-cache-in-rails-3</id>
    <content type="html"><![CDATA[<p>Rails中有一個<code>counter_cache</code>可以用，這東西的用途就是破壞正規化的(XD) ...</p>

<p>一般來說，當我們要計算關連的資料有幾筆的話，我們會用 <code>SELECT COUNT(id) FROM</code>comments<code>WHERE</code>post_id<code>= 1</code> 這種方式來計算，可是如果當request 量一大且資料量也大的時候這樣子其實超級麻煩的，所以可以透過<code>counter_cache</code>來直接cache住關連的資料筆數。</p>

<p>但是有時候可能因為某些原因導致沒有正確記錄到cache值，這時候我們就可以用<code>reset_counters</code>來自動重新整理這些值 ...</p>

<p>也許你會覺得奇怪，為什麼不要直接把值寫入<code>comments_count</code>這種欄位內就好呢？那是因為 .... 這個值是readonly的囧！</p>

<p>為了保護欄位值的正確只好這樣做，所以我們只好用<code>reset_counters</code>來處理這個部分了。</p>

<p>使用的方式是 <code>Model.reset_counters(id, association_name)</code></p>

<p>若以上面的例子來說的話，就是 <code>Post.reset_counters(1, :comments)</code></p>

<p>如何？很簡單吧？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Subdomain時自定Devise的Mailer Template]]></title>
    <link href="http://hechien.github.com/octopress/blog/custom-devise-mailer-template-with-subdomain/"/>
    <updated>2012-06-05T17:03:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/custom-devise-mailer-template-with-subdomain</id>
    <content type="html"><![CDATA[<p>這問題其實也是忽然間被雷到 ... 在這樣做之前要先去修改 <code>config/initializers/devise.rb</code>，設定自定的Mailer，然後我們還要自己手動產生一個Mailer。</p>

<!-- more -->


<p>我原本的作法是用Namespace來寫整個站，所以View的分類就是已經有分好資料夾了，我直接貼code可以嗎XD</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="sx">%w&#39;confirmation_instructions reset_password_instructions unlock_instructions&#39;</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">method</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;define_method &quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="sr">&quot; do |record|</span>
</span><span class='line'><span class="sr">  send_mail_with_record_and_action(record, method.to_s)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def send_mail_with_record_and_action(record, action)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">initialize_from_record</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span> <span class="n">headers_for</span><span class="p">(</span><span class="n">action</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'><span class="n">headers</span><span class="o">[</span><span class="ss">:template_path</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">record</span><span class="o">.</span><span class="n">from_app</span><span class="si">}</span><span class="s2">/mailer&quot;</span>
</span><span class='line'><span class="n">mail</span> <span class="n">headers</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>由於devise有<code>confirmation_instructions</code>、<code>reset_password_instructions</code>、<code>unlock_instructions</code>三個，而我只是要導到不同的app目錄去，所以就這樣子refactor，讓headers中的<code>template_path</code>可以是自訂的目錄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OmniAuth + Devise + OpenID]]></title>
    <link href="http://hechien.github.com/octopress/blog/omniauth-plus-devise-plus-openid/"/>
    <updated>2012-05-08T11:46:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/omniauth-plus-devise-plus-openid</id>
    <content type="html"><![CDATA[<p>最近內部討論結果覺得有可能需要Support Open ID的登入機制，因此就去survey了一下Devise擴展Open ID的方式。因為Devise本身支援OmniAuth，所以就直接以<code>Devise OmniAuth OpenID</code>的方式搜尋了一下，便找到這篇：<a href="http://blog.xdite.net/posts/2011/12/05/omniauth-clean-auth-provider-4/">http://blog.xdite.net/posts/2011/12/05/omniauth-clean-auth-provider-4/</a></p>

<p>其實這篇照做就可以了，只不過因為原始碼是從<a href="http://ruby-taiwan.org">http://ruby-taiwan.org</a>那邊來的，所以有一些code是不能用的 ... 需要自己稍微做調整一下</p>

<p>這個實作版本是Rails 3.2.3、Devise 2.0.4、OmniAuth 1.0.3</p>

<p>裡面的Code在<code>omniauth_callbacks.rb</code>中第9行左右有個問題，User必須要用includes把authorizations給引入進來，不然會噴 ... XD</p>

<p>可能是因為原本的Code用MongoID當做Data source的關係，所以原本的Code內並沒有寫includes這一塊吧 ...</p>

<p>然後要記得在<code>user.rb</code>實作<code>bind_service</code>，不然原本的code去bind使用者的部份會有問題 ...</p>

<p>要把<code>omniauth_callbacks.rb</code>放在<code>app/models/user</code>底下、把<code>omniauth_callbacks_controller.rb</code>放在<code>app/controllers/users</code>底下，總之在model的資料夾是<code>user</code>而controller的資料夾是<code>users</code>就對了。</p>

<p>大致上就這樣。</p>

<p>喔對，很重要的一點就是 ... 現在網路上很多範例都會叫你去<code>config/initializers/omniauth.rb</code>內設定provider，這樣做的話一定會噴掉 ... 我在這邊花很多時間才搞定囧，請記住，<strong>不必</strong>寫在這個地方！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails打索引技巧]]></title>
    <link href="http://hechien.github.com/octopress/blog/railsda-suo-yin-ji-qiao/"/>
    <updated>2012-04-24T09:36:00+08:00</updated>
    <id>http://hechien.github.com/octopress/blog/railsda-suo-yin-ji-qiao</id>
    <content type="html"><![CDATA[<p>做專案學到的一個技巧 ... 應該說，是很慘痛的學到一個技巧=_= ...</p>

<p>我們都知道，Rails可以透過<code>rails g migration blahblah</code>來產生Migration file然後在裡面寫<code>add_index</code>來打索引，可是切記切記！！不要把索引寫在同一個表內 ... 當資料量大，而且其中一個index打失敗你就會哭了 ...</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Mysql2::Error: Specified key was too long; max key length is 1000 bytes: CREATE  INDEX &lt;code>index_products_on_url_identify_and_name&lt;/code> ON &lt;code>products&lt;/code> (&lt;code>url_identify&lt;/code>, &lt;code>name&lt;/code>)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>慘痛T_T</p>
]]></content>
  </entry>
  
</feed>
